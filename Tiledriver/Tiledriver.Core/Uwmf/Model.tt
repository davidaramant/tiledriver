<#
/*
** Model.tt
**
**---------------------------------------------------------------------------
** Copyright (c) 2016, David Aramant
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
**
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**---------------------------------------------------------------------------
**
**
*/
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Tiledriver.UwmfMetadata\bin\$(Configuration)\Tiledriver.UwmfMetadata.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Tiledriver.UwmfMetadata" #>
<#@ output extension="Generated.cs" #>
/*
** Model.Generated.cs
**
**---------------------------------------------------------------------------
** Copyright (c) 2016, David Aramant
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions
** are met:
**
** 1. Redistributions of source code must retain the above copyright
**    notice, this list of conditions and the following disclaimer.
** 2. Redistributions in binary form must reproduce the above copyright
**    notice, this list of conditions and the following disclaimer in the
**    documentation and/or other materials provided with the distribution.
** 3. The name of the author may not be used to endorse or promote products
**    derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**---------------------------------------------------------------------------
**
**
*/

using System.Collections.Generic;
using System.IO;

namespace Tiledriver.Core.Uwmf
{
<#
foreach( var block in UwmfDefinitions.Blocks )
{
#>
    public sealed partial class <#= block.PascalCaseName #> : BaseUwmfBlock<# if( block.NormalWriting ) { #>, IWriteableUwmfBlock<# }#> 
    {
<#
    // #######################
    // # REQUIRED PROPERTIES #
    // #######################
    foreach( var property in block.Properties.Where( _ => _.IsRequired ) )
    {
#>
        private bool <#= property.FieldName #>HasBeenSet = false;
        private <#= property.TypeString #> <#= property.FieldName #>;
        public <#= property.TypeString #> <#= property.PascalCaseName #>
        {
            get { return <#= property.FieldName #>; }
            set 
            { 
                <#= property.FieldName #>HasBeenSet = true;
                <#= property.FieldName #> = value;
            }
        }
<#
    }
    // ###########################
    // # END REQUIRED PROPERTIES #
    // ###########################

    // #######################
    // # OPTIONAL PROPERTIES #
    // #######################
    foreach( var property in block.Properties.Where( _ => !_.IsRequired ) )
    {
#>
        public <#= property.TypeString #> <#= property.PascalCaseName #> { get; set; } = <#= property.DefaultAsString #>;
<#
    }
    // ###########################
    // # END OPTIONAL PROPERTIES #
    // ###########################

    // #############
    // # SUBBLOCKS #
    // #############
    foreach( var subBlock in block.SubBlocks )
    {
#>
        public readonly List<<#= subBlock.PascalCaseName #>> <#= subBlock.PluralPascalCaseName #> = new List<<#= subBlock.PascalCaseName #>>();
<#
    }
    // #################
    // # END SUBBLOCKS #
    // #################

    // #################
    // # UNKNOWN STUFF #
    // #################
if( block.CanHaveUnknownProperties )
{
#>
        public List<UnknownProperty> UnknownProperties { get; } = new List<UnknownProperty>();
<#
}
if( block.CanHaveUnknownBlocks )
{
#>
        public List<UnknownBlock> UnknownBlocks { get; } = new List<UnknownBlock>();
<#
}
    // #####################
    // # END UNKNOWN STUFF #
    // #####################

    // ################
    // # CONSTRUCTORS #
    // ################
#>

        public <#= block.PascalCaseName #>() { }

        public <#= block.PascalCaseName #>(
<#
    var allParams = 
        block.Properties.Where( p=>p.IsRequired ).Select( 
            p => $"{new string(' ', 12)}{p.TypeString} {p.CamelCaseName}" ).ToList();

    foreach( var subBlock in block.SubBlocks )
    {
        allParams.Add( $"{new string(' ',12)}IEnumerable<{subBlock.PascalCaseName}> {subBlock.PluralCamelCaseName}" );
    }

    foreach (var p in block.Properties.Where(p => !p.IsRequired) )
    {
        allParams.Add($"{new string(' ', 12)}{p.TypeString} {p.CamelCaseName}{p.DefaultAssignment}");
    }


    var constructorParams = 
        String.Join( 
            "," + Environment.NewLine, 
            allParams );
#>
<#= constructorParams #>)
        {
<#
    foreach( var property in block.Properties )
    {
#>
            <#= property.PascalCaseName #> = <#= property.CamelCaseName #>;
<#
    }
    foreach( var subBlock in block.SubBlocks )
    {
#>
            <#= subBlock.PluralPascalCaseName #>.AddRange( <#= subBlock.PluralCamelCaseName #> );
<#
    }
#>

            AdditionalSemanticChecks();
        }
<#
    // ####################
    // # END CONSTRUCTORS #
    // ####################

    // ##################
    // # WRITETO METHOD #
    // ##################

    if( block.NormalWriting ) 
    { 
#>

        public Stream WriteTo(Stream stream)
        {
            CheckSemanticValidity();

<#
    var indent = block.IsSubBlock ? "true" : "false";

    if( block.IsSubBlock )
    {
#>
            WriteLine( stream, "<#= block.UwmfName #>");
            WriteLine( stream, "{");
<#
    }

    // WRITE ALL REQUIRED PROPERTIES
    foreach( var property in block.Properties.Where( _ => _.IsRequired ) )
    {
#>
            WriteProperty( stream, "<#= property.UwmfName #>", <#= property.FieldName #>, indent: <#= indent #> );
<#
    }
    // WRITE OPTIONAL PROPERTIES
    foreach( var property in block.Properties.Where( _ => !_.IsRequired ) )
    {
#>
            if( <#= property.PascalCaseName #> != <#= property.DefaultAsString #> )
            {
                WriteProperty( stream, "<#= property.UwmfName #>", <#= property.PascalCaseName #>, indent: <#= indent #> );
            }
<#
    }
    // WRITE UNKNOWN PROPERTES
    if( block.CanHaveUnknownProperties )
    {
#>
            foreach( var property in UnknownProperties )
            {
                WritePropertyVerbatim( stream, (string)property.Name, property.Value, indent: <#= indent #> );
            }
<#
    }
    // WRITE SUBBLOCKS
    foreach( var subBlock in block.SubBlocks )
    {
#>
            WriteBlocks( stream,  <#= subBlock.PluralPascalCaseName #> );
<#
    }
    // WRITE UNKNOWN BLOCKS
    if( block.CanHaveUnknownBlocks )
    {
#>
            WriteBlocks( stream,  UnknownBlocks );
<#
    }
    if( block.IsSubBlock )
    {
#>
            WriteLine( stream, "}");
<#
    }
#>
                
            return stream;
        }
<#
    } // End 'if' for NormalWriting
    // ######################
    // # END WRITETO METHOD #
    // ######################

    // #########################
    // # CHECKSEMANTICVALIDITY #
    // #########################
#>

        public void CheckSemanticValidity()
        {
<#
    // CHECK THAT ALL REQUIRED PROPERTIES HAVE BEEN SET
    foreach( var property in block.Properties.Where( _ => _.IsRequired ) )
    {
#>
            if( ! <#= property.FieldName #>HasBeenSet )
            {
                throw new InvalidUwmfException("Did not set <#= property.PascalCaseName #> on <#= block.PascalCaseName #>");
            }
<#
    }
#>
            AdditionalSemanticChecks();
        }

        partial void AdditionalSemanticChecks();
    }

<#
}
    // #############################
    // # END CHECKSEMANTICVALIDITY #
    // #############################
#>
}
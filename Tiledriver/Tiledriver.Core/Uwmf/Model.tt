<#
// Copyright (c) 2016 David Aramant
// Distributed under the GNU GPL v2. For full terms see the file LICENSE.
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Tiledriver.UwmfMetadata\bin\$(Configuration)\Tiledriver.UwmfMetadata.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Tiledriver.UwmfMetadata" #>
<#@ output extension=".cs" #>
// Copyright (c) 2016 David Aramant
// Distributed under the GNU GPL v2. For full terms see the file LICENSE.

using System.Collections.Generic;
using System.IO;

namespace Tiledriver.Core.Uwmf
{
<#
foreach( var blockDefinition in UwmfDefinitions.Blocks )
{
#>
    public sealed partial class <#= blockDefinition.PascalCaseName #>
<# if( blockDefinition.NormalWriting ) 
{ 
#>                                    : IUwmfEntry
<# }#>
    {
<#
    // WRITE REQUIRED FIELDS
    foreach( var property in blockDefinition.Properties.Where( _ => _.IsRequired ) )
    {
#>
        private bool <#= property.FieldName #>HasBeenSet = false;
        private <#= property.TypeString #> <#= property.FieldName #>;
<#
    }
#>

<#
    // WRITE REQUIRED PROPERTIES
    foreach( var property in blockDefinition.Properties.Where( _ => _.IsRequired ) )
    {
#>
        public <#= property.TypeString #> <#= property.PascalCaseName #>
        {
            get { return <#= property.FieldName #>; }
            set 
            { 
                <#= property.FieldName #>HasBeenSet = true;
                <#= property.FieldName #> = value;
            }
        }
<#
    }
    // WRITE OPTIONAL PROPERTIES
    foreach( var property in blockDefinition.Properties.Where( _ => !_.IsRequired ) )
    {
#>
        public <#= property.TypeString #> <#= property.PascalCaseName #> { get; set; } = <#= property.DefaultAsString #>;
<#
    }
    // WRITE SUBBLOCKS
    foreach( var subBlock in blockDefinition.SubBlocks )
    {
#>
        public readonly List<<#= subBlock.PascalCaseName #>> <#= subBlock.PluralPascalCaseName #> = new List<<#= subBlock.PascalCaseName #>>();
<#
    }

    if( blockDefinition.NormalWriting ) 
    { 
#>

        public Stream WriteTo(Stream stream)
        {
            CheckSemanticValidity();

<#
    if( blockDefinition.IsSubBlock )
    {
#>
            stream.Line("<#= blockDefinition.CamelCaseName #>");
            stream.Line("{");
<#
    }

    // WRITE ALL REQUIRED PROPERTIES
    foreach( var property in blockDefinition.Properties.Where( _ => _.IsRequired ) )
    {
#>
            stream.Attribute( "<#= property.CamelCaseName #>", <#= property.FieldName #> );
<#
    }
    // WRITE INTEGER NUMBER OPTIONAL PROPERTIES
    foreach( var property in blockDefinition.Properties.Where( _ => !_.IsRequired && _.Type == PropertyType.IntegerNumber ) )
    {
#>
            stream.MaybeAttribute( <#= property.PascalCaseName #> != <#= property.DefaultAsString #>, "<#= property.CamelCaseName #>", <#= property.PascalCaseName #> );
<#
    }
    // WRITE FLOATING POINT NUMBER OPTIONAL PROPERTIES
    foreach( var property in blockDefinition.Properties.Where( _ => !_.IsRequired && _.Type == PropertyType.FloatingPointNumber ) )
    {
#>
            stream.MaybeAttribute( <#= property.PascalCaseName #> != <#= property.DefaultAsString #>, "<#= property.CamelCaseName #>", <#= property.PascalCaseName #> );
<#
    }
    // WRITE BOOLEAN OPTIONAL PROPERTIES
    foreach( var property in blockDefinition.Properties.Where( _ => !_.IsRequired && _.Type == PropertyType.Boolean ) )
    {
#>
            stream.MaybeAttribute( <#= property.PascalCaseName #> != <#= property.DefaultAsString #>, "<#= property.CamelCaseName #>", <#= property.PascalCaseName #> );
<#
    }
    // WRITE STRING OPTIONAL PROPERTIES
    foreach( var property in blockDefinition.Properties.Where( _ => !_.IsRequired && _.Type == PropertyType.String ) )
    {
#>
            stream.MaybeAttribute( <#= property.PascalCaseName #> != <#= property.DefaultAsString #>, "<#= property.CamelCaseName #>", <#= property.PascalCaseName #> );
<#
    }
    // WRITE SUBBLOCKS
    foreach( var subBlock in blockDefinition.SubBlocks )
    {
#>
            stream.Blocks( <#= subBlock.PascalCaseName #>s );
<#
    }

    if( blockDefinition.IsSubBlock )
    {
#>
            stream.Line("}");
<#
    }
#>
                
            return stream;
        }
<#
    } // End 'if' for NormalWriting
#>

        public void CheckSemanticValidity()
        {
<#
    // CHECK THAT ALL REQUIRED PROPERTIES HAVE BEEN SET
    foreach( var property in blockDefinition.Properties.Where( _ => _.IsRequired ) )
    {
#>
            if( ! <#= property.FieldName #>HasBeenSet )
            {
                throw new InvalidUwmfException("Did not set <#= property.PascalCaseName #> on <#= blockDefinition.PascalCaseName #>");
            }
<#
    }
#>
            AdditionalSemanticChecks();
        }

        partial void AdditionalSemanticChecks();
    }

<#
}
#>
}